include "common.fbs";
namespace client_request;

table DelegateCode {
    data: [ubyte](required);
    code_hash:[ubyte](required);
}

table DelegateKey {
  key:[ubyte](required);
  code_hash:[ubyte](required);
}

table DelegateContext {
    data:[ubyte](required);
}

table WasmDelegateV1 {
    parameters:[ubyte](required);
    data:DelegateCode(required);
    key:DelegateKey(required);
}

union DelegateType {
    WasmDelegateV1
}

table DelegateContainer {
    delegate:DelegateType(required);
}

table RelatedContract {
  instance_id:common.ContractInstanceId(required);
  state:[ubyte](required);
}

table RelatedContracts {
  contracts:[RelatedContract](required);
}

table Put {
  container:common.ContractContainer(required);
  wrapped_state:[ubyte](required);
  related_contracts:RelatedContracts(required);
}

table Update {
  key:common.ContractKey(required);
  data:common.UpdateData(required);
}

table Get {
  key:common.ContractKey(required);
  fetch_contract:bool;
}

table Subscribe {
  key:common.ContractKey(required);
  summary:[ubyte];
}

union ContractRequestType {
  Put,
  Update,
  Get,
  Subscribe
}

table RandomBytes {
    data:[ubyte](required);
}

table ClientResponse {
    data: [ubyte](required);
}

table UserInputResponse {
    request_id:uint;
    response:ClientResponse(required);
    delegate_context:[ubyte](required);
}

union InboundDelegateMsgType {
    common.ApplicationMessage,
    common.GetSecretResponse,
    RandomBytes,
    UserInputResponse,
    common.GetSecretRequest,
}

table InboundDelegateMsg {
    inbound:InboundDelegateMsgType(required);
}

table ApplicationMessages {
    key:DelegateKey(required);
    params:[ubyte](required);
    inbound:[InboundDelegateMsg](required);
}

table GetSecretRequestType {
    key:DelegateKey(required);
    params:[ubyte](required);
    get_request:common.GetSecretRequest(required);
}

table RegisterDelegate {
    delegate:DelegateContainer(required);
    cipher:[ubyte](required);
    nonce:[ubyte](required);
}

table UnregisterDelegate {
    key:DelegateKey(required);
}

union DelegateRequestType {
  ApplicationMessages,
  GetSecretRequestType,
  RegisterDelegate,
  UnregisterDelegate
}


table ContractRequest {
  contract_request:ContractRequestType(required);
}

table DelegateRequest {
  delegate_request:DelegateRequestType(required);
}

table Disconnect {
  cause:string;
}

union ClientRequestType {
    ContractRequest,
    DelegateRequest,
    Disconnect
}

table ClientRequest {
    client_request:ClientRequestType(required);
}

root_type ClientRequest;