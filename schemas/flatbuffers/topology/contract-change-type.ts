// automatically generated by the FlatBuffers compiler, do not modify

import { PutFailure } from '../topology/put-failure.js';
import { PutRequest } from '../topology/put-request.js';
import { PutSuccess } from '../topology/put-success.js';
import { UpdateFailure } from '../topology/update-failure.js';
import { UpdateRequest } from '../topology/update-request.js';
import { UpdateSuccess } from '../topology/update-success.js';


export enum ContractChangeType {
  NONE = 0,
  PutRequest = 1,
  PutSuccess = 2,
  PutFailure = 3,
  UpdateRequest = 4,
  UpdateSuccess = 5,
  UpdateFailure = 6
}

export function unionToContractChangeType(
  type: ContractChangeType,
  accessor: (obj:PutFailure|PutRequest|PutSuccess|UpdateFailure|UpdateRequest|UpdateSuccess) => PutFailure|PutRequest|PutSuccess|UpdateFailure|UpdateRequest|UpdateSuccess|null
): PutFailure|PutRequest|PutSuccess|UpdateFailure|UpdateRequest|UpdateSuccess|null {
  switch(ContractChangeType[type]) {
    case 'NONE': return null; 
    case 'PutRequest': return accessor(new PutRequest())! as PutRequest;
    case 'PutSuccess': return accessor(new PutSuccess())! as PutSuccess;
    case 'PutFailure': return accessor(new PutFailure())! as PutFailure;
    case 'UpdateRequest': return accessor(new UpdateRequest())! as UpdateRequest;
    case 'UpdateSuccess': return accessor(new UpdateSuccess())! as UpdateSuccess;
    case 'UpdateFailure': return accessor(new UpdateFailure())! as UpdateFailure;
    default: return null;
  }
}

export function unionListToContractChangeType(
  type: ContractChangeType, 
  accessor: (index: number, obj:PutFailure|PutRequest|PutSuccess|UpdateFailure|UpdateRequest|UpdateSuccess) => PutFailure|PutRequest|PutSuccess|UpdateFailure|UpdateRequest|UpdateSuccess|null, 
  index: number
): PutFailure|PutRequest|PutSuccess|UpdateFailure|UpdateRequest|UpdateSuccess|null {
  switch(ContractChangeType[type]) {
    case 'NONE': return null; 
    case 'PutRequest': return accessor(index, new PutRequest())! as PutRequest;
    case 'PutSuccess': return accessor(index, new PutSuccess())! as PutSuccess;
    case 'PutFailure': return accessor(index, new PutFailure())! as PutFailure;
    case 'UpdateRequest': return accessor(index, new UpdateRequest())! as UpdateRequest;
    case 'UpdateSuccess': return accessor(index, new UpdateSuccess())! as UpdateSuccess;
    case 'UpdateFailure': return accessor(index, new UpdateFailure())! as UpdateFailure;
    default: return null;
  }
}
