// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Response, unionToResponse, unionListToResponse } from '../topology/response.js';


export class ControllerResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ControllerResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsControllerResponse(bb:flatbuffers.ByteBuffer, obj?:ControllerResponse):ControllerResponse {
  return (obj || new ControllerResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsControllerResponse(bb:flatbuffers.ByteBuffer, obj?:ControllerResponse):ControllerResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ControllerResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

responseType():Response {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Response.NONE;
}

response<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startControllerResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addResponseType(builder:flatbuffers.Builder, responseType:Response) {
  builder.addFieldInt8(0, responseType, Response.NONE);
}

static addResponse(builder:flatbuffers.Builder, responseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, responseOffset, 0);
}

static endControllerResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // response
  return offset;
}

static createControllerResponse(builder:flatbuffers.Builder, responseType:Response, responseOffset:flatbuffers.Offset):flatbuffers.Offset {
  ControllerResponse.startControllerResponse(builder);
  ControllerResponse.addResponseType(builder, responseType);
  ControllerResponse.addResponse(builder, responseOffset);
  return ControllerResponse.endControllerResponse(builder);
}
}
