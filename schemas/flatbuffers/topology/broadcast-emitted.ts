// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class BroadcastEmitted {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BroadcastEmitted {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBroadcastEmitted(bb:flatbuffers.ByteBuffer, obj?:BroadcastEmitted):BroadcastEmitted {
  return (obj || new BroadcastEmitted()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBroadcastEmitted(bb:flatbuffers.ByteBuffer, obj?:BroadcastEmitted):BroadcastEmitted {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BroadcastEmitted()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

transaction():string|null
transaction(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
transaction(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

upstream():string|null
upstream(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
upstream(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

broadcastTo(index: number):string
broadcastTo(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
broadcastTo(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

broadcastToLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

broadcastedTo():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

key():string|null
key(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
key(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sender():string|null
sender(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
sender(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

contractLocation():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startBroadcastEmitted(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addTransaction(builder:flatbuffers.Builder, transactionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, transactionOffset, 0);
}

static addUpstream(builder:flatbuffers.Builder, upstreamOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, upstreamOffset, 0);
}

static addBroadcastTo(builder:flatbuffers.Builder, broadcastToOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, broadcastToOffset, 0);
}

static createBroadcastToVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBroadcastToVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addBroadcastedTo(builder:flatbuffers.Builder, broadcastedTo:number) {
  builder.addFieldInt32(3, broadcastedTo, 0);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, keyOffset, 0);
}

static addSender(builder:flatbuffers.Builder, senderOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, senderOffset, 0);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(6, timestamp, BigInt('0'));
}

static addContractLocation(builder:flatbuffers.Builder, contractLocation:number) {
  builder.addFieldFloat64(7, contractLocation, 0.0);
}

static endBroadcastEmitted(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // transaction
  builder.requiredField(offset, 6) // upstream
  builder.requiredField(offset, 12) // key
  builder.requiredField(offset, 14) // sender
  return offset;
}

static createBroadcastEmitted(builder:flatbuffers.Builder, transactionOffset:flatbuffers.Offset, upstreamOffset:flatbuffers.Offset, broadcastToOffset:flatbuffers.Offset, broadcastedTo:number, keyOffset:flatbuffers.Offset, senderOffset:flatbuffers.Offset, timestamp:bigint, contractLocation:number):flatbuffers.Offset {
  BroadcastEmitted.startBroadcastEmitted(builder);
  BroadcastEmitted.addTransaction(builder, transactionOffset);
  BroadcastEmitted.addUpstream(builder, upstreamOffset);
  BroadcastEmitted.addBroadcastTo(builder, broadcastToOffset);
  BroadcastEmitted.addBroadcastedTo(builder, broadcastedTo);
  BroadcastEmitted.addKey(builder, keyOffset);
  BroadcastEmitted.addSender(builder, senderOffset);
  BroadcastEmitted.addTimestamp(builder, timestamp);
  BroadcastEmitted.addContractLocation(builder, contractLocation);
  return BroadcastEmitted.endBroadcastEmitted(builder);
}
}
