// automatically generated by the FlatBuffers compiler, do not modify

import { AddedConnection } from '../topology/added-connection.js';
import { Error } from '../topology/error.js';
import { RemovedConnection } from '../topology/removed-connection.js';


export enum PeerChangeType {
  NONE = 0,
  AddedConnection = 1,
  RemovedConnection = 2,
  Error = 3
}

export function unionToPeerChangeType(
  type: PeerChangeType,
  accessor: (obj:AddedConnection|Error|RemovedConnection) => AddedConnection|Error|RemovedConnection|null
): AddedConnection|Error|RemovedConnection|null {
  switch(PeerChangeType[type]) {
    case 'NONE': return null; 
    case 'AddedConnection': return accessor(new AddedConnection())! as AddedConnection;
    case 'RemovedConnection': return accessor(new RemovedConnection())! as RemovedConnection;
    case 'Error': return accessor(new Error())! as Error;
    default: return null;
  }
}

export function unionListToPeerChangeType(
  type: PeerChangeType, 
  accessor: (index: number, obj:AddedConnection|Error|RemovedConnection) => AddedConnection|Error|RemovedConnection|null, 
  index: number
): AddedConnection|Error|RemovedConnection|null {
  switch(PeerChangeType[type]) {
    case 'NONE': return null; 
    case 'AddedConnection': return accessor(index, new AddedConnection())! as AddedConnection;
    case 'RemovedConnection': return accessor(index, new RemovedConnection())! as RemovedConnection;
    case 'Error': return accessor(index, new Error())! as Error;
    default: return null;
  }
}
