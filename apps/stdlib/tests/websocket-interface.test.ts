import {HostResponse, HostResponseT} from "../src/host-response/host-response";
import * as flatbuffers from "flatbuffers";
import {HostResponseType} from "../src/host-response/host-response-type";
import * as assert from "assert";

describe("locutus websocket API ok result deserialization", () => {
    test("Contract put response deserialization", () => {
        const GET_OP_WITH_CONTRACT = new Uint8Array([12, 0, 0, 0, 8, 0, 12, 0, 7, 0, 8, 0, 8, 0, 0,
            0, 0, 0, 0, 1, 12, 0, 0, 0, 8, 0, 14, 0, 7, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 1, 16, 0, 0, 0, 0, 0, 10, 0, 12,
            0, 4, 0, 0, 0, 8, 0, 10, 0, 0, 0, 16, 1, 0, 0, 4, 0, 0, 0, 250, 0, 0, 0, 123, 10, 9, 34, 109, 101, 115, 115,
            97, 103, 101, 115, 34, 58, 32, 91, 10, 9, 9, 123, 10, 9, 9, 9, 34, 97, 117, 116, 104, 111, 114, 34, 58, 32,
            34, 73, 68, 71, 34, 44, 10, 9, 9, 9, 34, 100, 97, 116, 101, 34, 58, 32, 34, 50, 48, 50, 50, 45, 48, 53, 45,
            49, 48, 84, 48, 48, 58, 48, 48, 58, 48, 48, 90, 34, 44, 10, 9, 9, 9, 34, 116, 105, 116, 108, 101, 34, 58, 32,
            34, 76, 111, 114, 101, 32, 105, 112, 115, 117, 109, 34, 44, 10, 9, 9, 9, 34, 99, 111, 110, 116, 101, 110, 116,
            34, 58, 32, 34, 76, 111, 114, 101, 109, 32, 105, 112, 115, 117, 109, 32, 100, 111, 108, 111, 114, 32, 115, 105,
            116, 32, 97, 109, 101, 116, 44, 32, 99, 111, 110, 115, 101, 99, 116, 101, 116, 117, 114, 32, 97, 100, 105, 112,
            105, 115, 99, 105, 110, 103, 32, 101, 108, 105, 116, 44, 32, 115, 101, 100, 32, 100, 111, 32, 101, 105, 117,
            115, 109, 111, 100, 32, 116, 101, 109, 112, 111, 114, 32, 105, 110, 99, 105, 100, 105, 100, 117, 110, 116,
            32, 117, 116, 32, 108, 97, 98, 111, 114, 101, 32, 101, 116, 32, 100, 111, 108, 111, 114, 101, 32, 109, 97,
            103, 110, 97, 32, 97, 108, 105, 113, 117, 97, 46, 34, 10, 9, 9, 125, 10, 9, 93, 10, 125, 0, 0, 8, 0, 12, 0,
            4, 0, 8, 0, 8, 0, 0, 0, 52, 0, 0, 0, 4, 0, 0, 0, 32, 0, 0, 0, 175, 19, 73, 185, 245, 249, 161, 166, 160, 64,
            77, 234, 54, 220, 201, 73, 155, 203, 37, 201, 173, 193, 18, 183, 204, 154, 147, 202, 228, 31, 50, 98, 0, 0,
            6, 0, 8, 0, 4, 0, 6, 0, 0, 0, 4, 0, 0, 0, 32, 0, 0, 0, 48, 21, 194, 231, 64, 121, 12, 135, 219, 240, 36,
            194, 111, 0, 1, 81, 250, 218, 107, 115, 109, 112, 7, 183, 143, 87, 57, 131, 255, 76, 102, 136]);
        // let data = new flatbuffers.ByteBuffer(GET_OP_WITH_CONTRACT);
        // HostResponse.getRootAsHostResponse(data).unpack();
        // assert.equal(HostResponse.getRootAsHostResponse(data).responseType(), HostResponseType.Ok);
    });
});