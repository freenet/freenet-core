// automatically generated by the FlatBuffers compiler, do not modify

import { DeltaUpdate, DeltaUpdateT } from '../common/delta-update.js';
import { RelatedDeltaUpdate, RelatedDeltaUpdateT } from '../common/related-delta-update.js';
import { RelatedStateAndDeltaUpdate, RelatedStateAndDeltaUpdateT } from '../common/related-state-and-delta-update.js';
import { RelatedStateUpdate, RelatedStateUpdateT } from '../common/related-state-update.js';
import { StateAndDeltaUpdate, StateAndDeltaUpdateT } from '../common/state-and-delta-update.js';
import { StateUpdate, StateUpdateT } from '../common/state-update.js';


export enum UpdateDataType {
  NONE = 0,
  StateUpdate = 1,
  DeltaUpdate = 2,
  StateAndDeltaUpdate = 3,
  RelatedStateUpdate = 4,
  RelatedDeltaUpdate = 5,
  RelatedStateAndDeltaUpdate = 6
}

export function unionToUpdateDataType(
  type: UpdateDataType,
  accessor: (obj:DeltaUpdate|RelatedDeltaUpdate|RelatedStateAndDeltaUpdate|RelatedStateUpdate|StateAndDeltaUpdate|StateUpdate) => DeltaUpdate|RelatedDeltaUpdate|RelatedStateAndDeltaUpdate|RelatedStateUpdate|StateAndDeltaUpdate|StateUpdate|null
): DeltaUpdate|RelatedDeltaUpdate|RelatedStateAndDeltaUpdate|RelatedStateUpdate|StateAndDeltaUpdate|StateUpdate|null {
  switch(UpdateDataType[type]) {
    case 'NONE': return null; 
    case 'StateUpdate': return accessor(new StateUpdate())! as StateUpdate;
    case 'DeltaUpdate': return accessor(new DeltaUpdate())! as DeltaUpdate;
    case 'StateAndDeltaUpdate': return accessor(new StateAndDeltaUpdate())! as StateAndDeltaUpdate;
    case 'RelatedStateUpdate': return accessor(new RelatedStateUpdate())! as RelatedStateUpdate;
    case 'RelatedDeltaUpdate': return accessor(new RelatedDeltaUpdate())! as RelatedDeltaUpdate;
    case 'RelatedStateAndDeltaUpdate': return accessor(new RelatedStateAndDeltaUpdate())! as RelatedStateAndDeltaUpdate;
    default: return null;
  }
}

export function unionListToUpdateDataType(
  type: UpdateDataType, 
  accessor: (index: number, obj:DeltaUpdate|RelatedDeltaUpdate|RelatedStateAndDeltaUpdate|RelatedStateUpdate|StateAndDeltaUpdate|StateUpdate) => DeltaUpdate|RelatedDeltaUpdate|RelatedStateAndDeltaUpdate|RelatedStateUpdate|StateAndDeltaUpdate|StateUpdate|null, 
  index: number
): DeltaUpdate|RelatedDeltaUpdate|RelatedStateAndDeltaUpdate|RelatedStateUpdate|StateAndDeltaUpdate|StateUpdate|null {
  switch(UpdateDataType[type]) {
    case 'NONE': return null; 
    case 'StateUpdate': return accessor(index, new StateUpdate())! as StateUpdate;
    case 'DeltaUpdate': return accessor(index, new DeltaUpdate())! as DeltaUpdate;
    case 'StateAndDeltaUpdate': return accessor(index, new StateAndDeltaUpdate())! as StateAndDeltaUpdate;
    case 'RelatedStateUpdate': return accessor(index, new RelatedStateUpdate())! as RelatedStateUpdate;
    case 'RelatedDeltaUpdate': return accessor(index, new RelatedDeltaUpdate())! as RelatedDeltaUpdate;
    case 'RelatedStateAndDeltaUpdate': return accessor(index, new RelatedStateAndDeltaUpdate())! as RelatedStateAndDeltaUpdate;
    default: return null;
  }
}
