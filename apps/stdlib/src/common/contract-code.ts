// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ContractCode implements flatbuffers.IUnpackableObject<ContractCodeT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ContractCode {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsContractCode(bb:flatbuffers.ByteBuffer, obj?:ContractCode):ContractCode {
  return (obj || new ContractCode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsContractCode(bb:flatbuffers.ByteBuffer, obj?:ContractCode):ContractCode {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ContractCode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

data(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

codeHash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

codeHashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

codeHashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startContractCode(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addCodeHash(builder:flatbuffers.Builder, codeHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, codeHashOffset, 0);
}

static createCodeHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startCodeHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endContractCode(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // data
  builder.requiredField(offset, 6) // code_hash
  return offset;
}

static createContractCode(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset, codeHashOffset:flatbuffers.Offset):flatbuffers.Offset {
  ContractCode.startContractCode(builder);
  ContractCode.addData(builder, dataOffset);
  ContractCode.addCodeHash(builder, codeHashOffset);
  return ContractCode.endContractCode(builder);
}

unpack(): ContractCodeT {
  return new ContractCodeT(
    this.bb!.createScalarList<number>(this.data.bind(this), this.dataLength()),
    this.bb!.createScalarList<number>(this.codeHash.bind(this), this.codeHashLength())
  );
}


unpackTo(_o: ContractCodeT): void {
  _o.data = this.bb!.createScalarList<number>(this.data.bind(this), this.dataLength());
  _o.codeHash = this.bb!.createScalarList<number>(this.codeHash.bind(this), this.codeHashLength());
}
}

export class ContractCodeT implements flatbuffers.IGeneratedObject {
constructor(
  public data: (number)[] = [],
  public codeHash: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const data = ContractCode.createDataVector(builder, this.data);
  const codeHash = ContractCode.createCodeHashVector(builder, this.codeHash);

  return ContractCode.createContractCode(builder,
    data,
    codeHash
  );
}
}
