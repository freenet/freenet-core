// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ContractInstanceId, ContractInstanceIdT } from '../common/contract-instance-id.js';


export class ContractKey implements flatbuffers.IUnpackableObject<ContractKeyT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ContractKey {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsContractKey(bb:flatbuffers.ByteBuffer, obj?:ContractKey):ContractKey {
  return (obj || new ContractKey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsContractKey(bb:flatbuffers.ByteBuffer, obj?:ContractKey):ContractKey {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ContractKey()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

instance(obj?:ContractInstanceId):ContractInstanceId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContractInstanceId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

code(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

codeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

codeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startContractKey(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addInstance(builder:flatbuffers.Builder, instanceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, instanceOffset, 0);
}

static addCode(builder:flatbuffers.Builder, codeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, codeOffset, 0);
}

static createCodeVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startCodeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endContractKey(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // instance
  return offset;
}

static createContractKey(builder:flatbuffers.Builder, instanceOffset:flatbuffers.Offset, codeOffset:flatbuffers.Offset):flatbuffers.Offset {
  ContractKey.startContractKey(builder);
  ContractKey.addInstance(builder, instanceOffset);
  ContractKey.addCode(builder, codeOffset);
  return ContractKey.endContractKey(builder);
}

unpack(): ContractKeyT {
  return new ContractKeyT(
    (this.instance() !== null ? this.instance()!.unpack() : null),
    this.bb!.createScalarList<number>(this.code.bind(this), this.codeLength())
  );
}


unpackTo(_o: ContractKeyT): void {
  _o.instance = (this.instance() !== null ? this.instance()!.unpack() : null);
  _o.code = this.bb!.createScalarList<number>(this.code.bind(this), this.codeLength());
}
}

export class ContractKeyT implements flatbuffers.IGeneratedObject {
constructor(
  public instance: ContractInstanceIdT|null = null,
  public code: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const instance = (this.instance !== null ? this.instance!.pack(builder) : 0);
  const code = ContractKey.createCodeVector(builder, this.code);

  return ContractKey.createContractKey(builder,
    instance,
    code
  );
}
}
