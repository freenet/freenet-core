// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ContractInstanceId, ContractInstanceIdT } from '../common/contract-instance-id.js';


export class RelatedStateUpdate implements flatbuffers.IUnpackableObject<RelatedStateUpdateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RelatedStateUpdate {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRelatedStateUpdate(bb:flatbuffers.ByteBuffer, obj?:RelatedStateUpdate):RelatedStateUpdate {
  return (obj || new RelatedStateUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRelatedStateUpdate(bb:flatbuffers.ByteBuffer, obj?:RelatedStateUpdate):RelatedStateUpdate {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RelatedStateUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

relatedTo(obj?:ContractInstanceId):ContractInstanceId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContractInstanceId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

state(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

stateLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stateArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startRelatedStateUpdate(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRelatedTo(builder:flatbuffers.Builder, relatedToOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, relatedToOffset, 0);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, stateOffset, 0);
}

static createStateVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startStateVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endRelatedStateUpdate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // related_to
  builder.requiredField(offset, 6) // state
  return offset;
}

static createRelatedStateUpdate(builder:flatbuffers.Builder, relatedToOffset:flatbuffers.Offset, stateOffset:flatbuffers.Offset):flatbuffers.Offset {
  RelatedStateUpdate.startRelatedStateUpdate(builder);
  RelatedStateUpdate.addRelatedTo(builder, relatedToOffset);
  RelatedStateUpdate.addState(builder, stateOffset);
  return RelatedStateUpdate.endRelatedStateUpdate(builder);
}

unpack(): RelatedStateUpdateT {
  return new RelatedStateUpdateT(
    (this.relatedTo() !== null ? this.relatedTo()!.unpack() : null),
    this.bb!.createScalarList<number>(this.state.bind(this), this.stateLength())
  );
}


unpackTo(_o: RelatedStateUpdateT): void {
  _o.relatedTo = (this.relatedTo() !== null ? this.relatedTo()!.unpack() : null);
  _o.state = this.bb!.createScalarList<number>(this.state.bind(this), this.stateLength());
}
}

export class RelatedStateUpdateT implements flatbuffers.IGeneratedObject {
constructor(
  public relatedTo: ContractInstanceIdT|null = null,
  public state: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const relatedTo = (this.relatedTo !== null ? this.relatedTo!.pack(builder) : 0);
  const state = RelatedStateUpdate.createStateVector(builder, this.state);

  return RelatedStateUpdate.createRelatedStateUpdate(builder,
    relatedTo,
    state
  );
}
}
