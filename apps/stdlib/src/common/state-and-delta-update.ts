// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class StateAndDeltaUpdate implements flatbuffers.IUnpackableObject<StateAndDeltaUpdateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):StateAndDeltaUpdate {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsStateAndDeltaUpdate(bb:flatbuffers.ByteBuffer, obj?:StateAndDeltaUpdate):StateAndDeltaUpdate {
  return (obj || new StateAndDeltaUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsStateAndDeltaUpdate(bb:flatbuffers.ByteBuffer, obj?:StateAndDeltaUpdate):StateAndDeltaUpdate {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new StateAndDeltaUpdate()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

state(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

stateLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stateArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

delta(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

deltaLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

deltaArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startStateAndDeltaUpdate(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stateOffset, 0);
}

static createStateVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startStateVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addDelta(builder:flatbuffers.Builder, deltaOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, deltaOffset, 0);
}

static createDeltaVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDeltaVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endStateAndDeltaUpdate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // state
  builder.requiredField(offset, 6) // delta
  return offset;
}

static createStateAndDeltaUpdate(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset, deltaOffset:flatbuffers.Offset):flatbuffers.Offset {
  StateAndDeltaUpdate.startStateAndDeltaUpdate(builder);
  StateAndDeltaUpdate.addState(builder, stateOffset);
  StateAndDeltaUpdate.addDelta(builder, deltaOffset);
  return StateAndDeltaUpdate.endStateAndDeltaUpdate(builder);
}

unpack(): StateAndDeltaUpdateT {
  return new StateAndDeltaUpdateT(
    this.bb!.createScalarList<number>(this.state.bind(this), this.stateLength()),
    this.bb!.createScalarList<number>(this.delta.bind(this), this.deltaLength())
  );
}


unpackTo(_o: StateAndDeltaUpdateT): void {
  _o.state = this.bb!.createScalarList<number>(this.state.bind(this), this.stateLength());
  _o.delta = this.bb!.createScalarList<number>(this.delta.bind(this), this.deltaLength());
}
}

export class StateAndDeltaUpdateT implements flatbuffers.IGeneratedObject {
constructor(
  public state: (number)[] = [],
  public delta: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const state = StateAndDeltaUpdate.createStateVector(builder, this.state);
  const delta = StateAndDeltaUpdate.createDeltaVector(builder, this.delta);

  return StateAndDeltaUpdate.createStateAndDeltaUpdate(builder,
    state,
    delta
  );
}
}
