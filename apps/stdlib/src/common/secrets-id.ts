// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class SecretsId implements flatbuffers.IUnpackableObject<SecretsIdT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SecretsId {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSecretsId(bb:flatbuffers.ByteBuffer, obj?:SecretsId):SecretsId {
  return (obj || new SecretsId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSecretsId(bb:flatbuffers.ByteBuffer, obj?:SecretsId):SecretsId {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SecretsId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

keyLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

keyArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

hash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

hashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

hashArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startSecretsId(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static createKeyVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startKeyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addHash(builder:flatbuffers.Builder, hashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, hashOffset, 0);
}

static createHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endSecretsId(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // key
  builder.requiredField(offset, 6) // hash
  return offset;
}

static createSecretsId(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset, hashOffset:flatbuffers.Offset):flatbuffers.Offset {
  SecretsId.startSecretsId(builder);
  SecretsId.addKey(builder, keyOffset);
  SecretsId.addHash(builder, hashOffset);
  return SecretsId.endSecretsId(builder);
}

unpack(): SecretsIdT {
  return new SecretsIdT(
    this.bb!.createScalarList<number>(this.key.bind(this), this.keyLength()),
    this.bb!.createScalarList<number>(this.hash.bind(this), this.hashLength())
  );
}


unpackTo(_o: SecretsIdT): void {
  _o.key = this.bb!.createScalarList<number>(this.key.bind(this), this.keyLength());
  _o.hash = this.bb!.createScalarList<number>(this.hash.bind(this), this.hashLength());
}
}

export class SecretsIdT implements flatbuffers.IGeneratedObject {
constructor(
  public key: (number)[] = [],
  public hash: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = SecretsId.createKeyVector(builder, this.key);
  const hash = SecretsId.createHashVector(builder, this.hash);

  return SecretsId.createSecretsId(builder,
    key,
    hash
  );
}
}
