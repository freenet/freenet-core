// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RelatedContract, RelatedContractT } from '../client-request/related-contract.js';


export class RelatedContracts implements flatbuffers.IUnpackableObject<RelatedContractsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RelatedContracts {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRelatedContracts(bb:flatbuffers.ByteBuffer, obj?:RelatedContracts):RelatedContracts {
  return (obj || new RelatedContracts()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRelatedContracts(bb:flatbuffers.ByteBuffer, obj?:RelatedContracts):RelatedContracts {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RelatedContracts()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

contracts(index: number, obj?:RelatedContract):RelatedContract|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new RelatedContract()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

contractsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRelatedContracts(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addContracts(builder:flatbuffers.Builder, contractsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, contractsOffset, 0);
}

static createContractsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startContractsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRelatedContracts(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // contracts
  return offset;
}

static createRelatedContracts(builder:flatbuffers.Builder, contractsOffset:flatbuffers.Offset):flatbuffers.Offset {
  RelatedContracts.startRelatedContracts(builder);
  RelatedContracts.addContracts(builder, contractsOffset);
  return RelatedContracts.endRelatedContracts(builder);
}

unpack(): RelatedContractsT {
  return new RelatedContractsT(
    this.bb!.createObjList<RelatedContract, RelatedContractT>(this.contracts.bind(this), this.contractsLength())
  );
}


unpackTo(_o: RelatedContractsT): void {
  _o.contracts = this.bb!.createObjList<RelatedContract, RelatedContractT>(this.contracts.bind(this), this.contractsLength());
}
}

export class RelatedContractsT implements flatbuffers.IGeneratedObject {
constructor(
  public contracts: (RelatedContractT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const contracts = RelatedContracts.createContractsVector(builder, builder.createObjectOffsetList(this.contracts));

  return RelatedContracts.createRelatedContracts(builder,
    contracts
  );
}
}
