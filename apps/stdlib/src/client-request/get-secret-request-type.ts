// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DelegateKey, DelegateKeyT } from '../client-request/delegate-key.js';
import { GetSecretRequest, GetSecretRequestT } from '../common/get-secret-request.js';


export class GetSecretRequestType implements flatbuffers.IUnpackableObject<GetSecretRequestTypeT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetSecretRequestType {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetSecretRequestType(bb:flatbuffers.ByteBuffer, obj?:GetSecretRequestType):GetSecretRequestType {
  return (obj || new GetSecretRequestType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetSecretRequestType(bb:flatbuffers.ByteBuffer, obj?:GetSecretRequestType):GetSecretRequestType {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetSecretRequestType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key(obj?:DelegateKey):DelegateKey|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DelegateKey()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

params(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

paramsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

paramsArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

getRequest(obj?:GetSecretRequest):GetSecretRequest|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new GetSecretRequest()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startGetSecretRequestType(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static addParams(builder:flatbuffers.Builder, paramsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, paramsOffset, 0);
}

static createParamsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startParamsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addGetRequest(builder:flatbuffers.Builder, getRequestOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, getRequestOffset, 0);
}

static endGetSecretRequestType(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // key
  builder.requiredField(offset, 6) // params
  builder.requiredField(offset, 8) // get_request
  return offset;
}


unpack(): GetSecretRequestTypeT {
  return new GetSecretRequestTypeT(
    (this.key() !== null ? this.key()!.unpack() : null),
    this.bb!.createScalarList<number>(this.params.bind(this), this.paramsLength()),
    (this.getRequest() !== null ? this.getRequest()!.unpack() : null)
  );
}


unpackTo(_o: GetSecretRequestTypeT): void {
  _o.key = (this.key() !== null ? this.key()!.unpack() : null);
  _o.params = this.bb!.createScalarList<number>(this.params.bind(this), this.paramsLength());
  _o.getRequest = (this.getRequest() !== null ? this.getRequest()!.unpack() : null);
}
}

export class GetSecretRequestTypeT implements flatbuffers.IGeneratedObject {
constructor(
  public key: DelegateKeyT|null = null,
  public params: (number)[] = [],
  public getRequest: GetSecretRequestT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? this.key!.pack(builder) : 0);
  const params = GetSecretRequestType.createParamsVector(builder, this.params);
  const getRequest = (this.getRequest !== null ? this.getRequest!.pack(builder) : 0);

  GetSecretRequestType.startGetSecretRequestType(builder);
  GetSecretRequestType.addKey(builder, key);
  GetSecretRequestType.addParams(builder, params);
  GetSecretRequestType.addGetRequest(builder, getRequest);

  return GetSecretRequestType.endGetSecretRequestType(builder);
}
}
