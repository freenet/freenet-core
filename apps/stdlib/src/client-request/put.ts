// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RelatedContracts, RelatedContractsT } from '../client-request/related-contracts.js';
import { ContractContainer, ContractContainerT } from '../common/contract-container.js';


export class Put implements flatbuffers.IUnpackableObject<PutT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Put {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPut(bb:flatbuffers.ByteBuffer, obj?:Put):Put {
  return (obj || new Put()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPut(bb:flatbuffers.ByteBuffer, obj?:Put):Put {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Put()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

container(obj?:ContractContainer):ContractContainer|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContractContainer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

wrappedState(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

wrappedStateLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

wrappedStateArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

relatedContracts(obj?:RelatedContracts):RelatedContracts|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new RelatedContracts()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startPut(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addContainer(builder:flatbuffers.Builder, containerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, containerOffset, 0);
}

static addWrappedState(builder:flatbuffers.Builder, wrappedStateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, wrappedStateOffset, 0);
}

static createWrappedStateVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startWrappedStateVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addRelatedContracts(builder:flatbuffers.Builder, relatedContractsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, relatedContractsOffset, 0);
}

static endPut(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // container
  builder.requiredField(offset, 6) // wrapped_state
  builder.requiredField(offset, 8) // related_contracts
  return offset;
}


unpack(): PutT {
  return new PutT(
    (this.container() !== null ? this.container()!.unpack() : null),
    this.bb!.createScalarList<number>(this.wrappedState.bind(this), this.wrappedStateLength()),
    (this.relatedContracts() !== null ? this.relatedContracts()!.unpack() : null)
  );
}


unpackTo(_o: PutT): void {
  _o.container = (this.container() !== null ? this.container()!.unpack() : null);
  _o.wrappedState = this.bb!.createScalarList<number>(this.wrappedState.bind(this), this.wrappedStateLength());
  _o.relatedContracts = (this.relatedContracts() !== null ? this.relatedContracts()!.unpack() : null);
}
}

export class PutT implements flatbuffers.IGeneratedObject {
constructor(
  public container: ContractContainerT|null = null,
  public wrappedState: (number)[] = [],
  public relatedContracts: RelatedContractsT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const container = (this.container !== null ? this.container!.pack(builder) : 0);
  const wrappedState = Put.createWrappedStateVector(builder, this.wrappedState);
  const relatedContracts = (this.relatedContracts !== null ? this.relatedContracts!.pack(builder) : 0);

  Put.startPut(builder);
  Put.addContainer(builder, container);
  Put.addWrappedState(builder, wrappedState);
  Put.addRelatedContracts(builder, relatedContracts);

  return Put.endPut(builder);
}
}
