// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Disconnect implements flatbuffers.IUnpackableObject<DisconnectT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Disconnect {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDisconnect(bb:flatbuffers.ByteBuffer, obj?:Disconnect):Disconnect {
  return (obj || new Disconnect()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDisconnect(bb:flatbuffers.ByteBuffer, obj?:Disconnect):Disconnect {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Disconnect()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cause():string|null
cause(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
cause(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDisconnect(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addCause(builder:flatbuffers.Builder, causeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, causeOffset, 0);
}

static endDisconnect(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDisconnect(builder:flatbuffers.Builder, causeOffset:flatbuffers.Offset):flatbuffers.Offset {
  Disconnect.startDisconnect(builder);
  Disconnect.addCause(builder, causeOffset);
  return Disconnect.endDisconnect(builder);
}

unpack(): DisconnectT {
  return new DisconnectT(
    this.cause()
  );
}


unpackTo(_o: DisconnectT): void {
  _o.cause = this.cause();
}
}

export class DisconnectT implements flatbuffers.IGeneratedObject {
constructor(
  public cause: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cause = (this.cause !== null ? builder.createString(this.cause!) : 0);

  return Disconnect.createDisconnect(builder,
    cause
  );
}
}
