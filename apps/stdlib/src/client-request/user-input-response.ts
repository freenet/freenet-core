// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ClientResponse, ClientResponseT } from '../client-request/client-response.js';


export class UserInputResponse implements flatbuffers.IUnpackableObject<UserInputResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UserInputResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUserInputResponse(bb:flatbuffers.ByteBuffer, obj?:UserInputResponse):UserInputResponse {
  return (obj || new UserInputResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUserInputResponse(bb:flatbuffers.ByteBuffer, obj?:UserInputResponse):UserInputResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UserInputResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

requestId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

response(obj?:ClientResponse):ClientResponse|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ClientResponse()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

delegateContext(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

delegateContextLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

delegateContextArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startUserInputResponse(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRequestId(builder:flatbuffers.Builder, requestId:number) {
  builder.addFieldInt32(0, requestId, 0);
}

static addResponse(builder:flatbuffers.Builder, responseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, responseOffset, 0);
}

static addDelegateContext(builder:flatbuffers.Builder, delegateContextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, delegateContextOffset, 0);
}

static createDelegateContextVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDelegateContextVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endUserInputResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // response
  builder.requiredField(offset, 8) // delegate_context
  return offset;
}


unpack(): UserInputResponseT {
  return new UserInputResponseT(
    this.requestId(),
    (this.response() !== null ? this.response()!.unpack() : null),
    this.bb!.createScalarList<number>(this.delegateContext.bind(this), this.delegateContextLength())
  );
}


unpackTo(_o: UserInputResponseT): void {
  _o.requestId = this.requestId();
  _o.response = (this.response() !== null ? this.response()!.unpack() : null);
  _o.delegateContext = this.bb!.createScalarList<number>(this.delegateContext.bind(this), this.delegateContextLength());
}
}

export class UserInputResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public requestId: number = 0,
  public response: ClientResponseT|null = null,
  public delegateContext: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const response = (this.response !== null ? this.response!.pack(builder) : 0);
  const delegateContext = UserInputResponse.createDelegateContextVector(builder, this.delegateContext);

  UserInputResponse.startUserInputResponse(builder);
  UserInputResponse.addRequestId(builder, this.requestId);
  UserInputResponse.addResponse(builder, response);
  UserInputResponse.addDelegateContext(builder, delegateContext);

  return UserInputResponse.endUserInputResponse(builder);
}
}
