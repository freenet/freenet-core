// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ContractKey, ContractKeyT } from '../common/contract-key.js';


export class Get implements flatbuffers.IUnpackableObject<GetT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Get {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGet(bb:flatbuffers.ByteBuffer, obj?:Get):Get {
  return (obj || new Get()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGet(bb:flatbuffers.ByteBuffer, obj?:Get):Get {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Get()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key(obj?:ContractKey):ContractKey|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContractKey()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

fetchContract():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startGet(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static addFetchContract(builder:flatbuffers.Builder, fetchContract:boolean) {
  builder.addFieldInt8(1, +fetchContract, +false);
}

static endGet(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // key
  return offset;
}

static createGet(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset, fetchContract:boolean):flatbuffers.Offset {
  Get.startGet(builder);
  Get.addKey(builder, keyOffset);
  Get.addFetchContract(builder, fetchContract);
  return Get.endGet(builder);
}

unpack(): GetT {
  return new GetT(
    (this.key() !== null ? this.key()!.unpack() : null),
    this.fetchContract()
  );
}


unpackTo(_o: GetT): void {
  _o.key = (this.key() !== null ? this.key()!.unpack() : null);
  _o.fetchContract = this.fetchContract();
}
}

export class GetT implements flatbuffers.IGeneratedObject {
constructor(
  public key: ContractKeyT|null = null,
  public fetchContract: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? this.key!.pack(builder) : 0);

  return Get.createGet(builder,
    key,
    this.fetchContract
  );
}
}
