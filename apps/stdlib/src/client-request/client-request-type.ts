// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { Authenticate, AuthenticateT } from '../client-request/authenticate.js';
import { ContractRequest, ContractRequestT } from '../client-request/contract-request.js';
import { DelegateRequest, DelegateRequestT } from '../client-request/delegate-request.js';
import { Disconnect, DisconnectT } from '../client-request/disconnect.js';


export enum ClientRequestType {
  NONE = 0,
  ContractRequest = 1,
  DelegateRequest = 2,
  Disconnect = 3,
  Authenticate = 4
}

export function unionToClientRequestType(
  type: ClientRequestType,
  accessor: (obj:Authenticate|ContractRequest|DelegateRequest|Disconnect) => Authenticate|ContractRequest|DelegateRequest|Disconnect|null
): Authenticate|ContractRequest|DelegateRequest|Disconnect|null {
  switch(ClientRequestType[type]) {
    case 'NONE': return null; 
    case 'ContractRequest': return accessor(new ContractRequest())! as ContractRequest;
    case 'DelegateRequest': return accessor(new DelegateRequest())! as DelegateRequest;
    case 'Disconnect': return accessor(new Disconnect())! as Disconnect;
    case 'Authenticate': return accessor(new Authenticate())! as Authenticate;
    default: return null;
  }
}

export function unionListToClientRequestType(
  type: ClientRequestType, 
  accessor: (index: number, obj:Authenticate|ContractRequest|DelegateRequest|Disconnect) => Authenticate|ContractRequest|DelegateRequest|Disconnect|null, 
  index: number
): Authenticate|ContractRequest|DelegateRequest|Disconnect|null {
  switch(ClientRequestType[type]) {
    case 'NONE': return null; 
    case 'ContractRequest': return accessor(index, new ContractRequest())! as ContractRequest;
    case 'DelegateRequest': return accessor(index, new DelegateRequest())! as DelegateRequest;
    case 'Disconnect': return accessor(index, new Disconnect())! as Disconnect;
    case 'Authenticate': return accessor(index, new Authenticate())! as Authenticate;
    default: return null;
  }
}
