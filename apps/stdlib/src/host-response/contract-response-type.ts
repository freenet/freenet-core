// automatically generated by the FlatBuffers compiler, do not modify

import { GetResponse, GetResponseT } from '../host-response/get-response.js';
import { PutResponse, PutResponseT } from '../host-response/put-response.js';
import { UpdateNotification, UpdateNotificationT } from '../host-response/update-notification.js';
import { UpdateResponse, UpdateResponseT } from '../host-response/update-response.js';


export enum ContractResponseType {
  NONE = 0,
  GetResponse = 1,
  PutResponse = 2,
  UpdateNotification = 3,
  UpdateResponse = 4
}

export function unionToContractResponseType(
  type: ContractResponseType,
  accessor: (obj:GetResponse|PutResponse|UpdateNotification|UpdateResponse) => GetResponse|PutResponse|UpdateNotification|UpdateResponse|null
): GetResponse|PutResponse|UpdateNotification|UpdateResponse|null {
  switch(ContractResponseType[type]) {
    case 'NONE': return null; 
    case 'GetResponse': return accessor(new GetResponse())! as GetResponse;
    case 'PutResponse': return accessor(new PutResponse())! as PutResponse;
    case 'UpdateNotification': return accessor(new UpdateNotification())! as UpdateNotification;
    case 'UpdateResponse': return accessor(new UpdateResponse())! as UpdateResponse;
    default: return null;
  }
}

export function unionListToContractResponseType(
  type: ContractResponseType, 
  accessor: (index: number, obj:GetResponse|PutResponse|UpdateNotification|UpdateResponse) => GetResponse|PutResponse|UpdateNotification|UpdateResponse|null, 
  index: number
): GetResponse|PutResponse|UpdateNotification|UpdateResponse|null {
  switch(ContractResponseType[type]) {
    case 'NONE': return null; 
    case 'GetResponse': return accessor(index, new GetResponse())! as GetResponse;
    case 'PutResponse': return accessor(index, new PutResponse())! as PutResponse;
    case 'UpdateNotification': return accessor(index, new UpdateNotification())! as UpdateNotification;
    case 'UpdateResponse': return accessor(index, new UpdateResponse())! as UpdateResponse;
    default: return null;
  }
}
