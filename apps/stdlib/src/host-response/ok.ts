// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Ok implements flatbuffers.IUnpackableObject<OkT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Ok {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOk(bb:flatbuffers.ByteBuffer, obj?:Ok):Ok {
  return (obj || new Ok()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOk(bb:flatbuffers.ByteBuffer, obj?:Ok):Ok {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Ok()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

msg():string|null
msg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startOk(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addMsg(builder:flatbuffers.Builder, msgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, msgOffset, 0);
}

static endOk(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // msg
  return offset;
}

static createOk(builder:flatbuffers.Builder, msgOffset:flatbuffers.Offset):flatbuffers.Offset {
  Ok.startOk(builder);
  Ok.addMsg(builder, msgOffset);
  return Ok.endOk(builder);
}

unpack(): OkT {
  return new OkT(
    this.msg()
  );
}


unpackTo(_o: OkT): void {
  _o.msg = this.msg();
}
}

export class OkT implements flatbuffers.IGeneratedObject {
constructor(
  public msg: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const msg = (this.msg !== null ? builder.createString(this.msg!) : 0);

  return Ok.createOk(builder,
    msg
  );
}
}
