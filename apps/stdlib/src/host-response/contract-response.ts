// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ContractResponseType, unionToContractResponseType, unionListToContractResponseType } from '../host-response/contract-response-type.js';
import { GetResponse, GetResponseT } from '../host-response/get-response.js';
import { PutResponse, PutResponseT } from '../host-response/put-response.js';
import { UpdateNotification, UpdateNotificationT } from '../host-response/update-notification.js';
import { UpdateResponse, UpdateResponseT } from '../host-response/update-response.js';


export class ContractResponse implements flatbuffers.IUnpackableObject<ContractResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ContractResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsContractResponse(bb:flatbuffers.ByteBuffer, obj?:ContractResponse):ContractResponse {
  return (obj || new ContractResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsContractResponse(bb:flatbuffers.ByteBuffer, obj?:ContractResponse):ContractResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ContractResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

contractResponseType():ContractResponseType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ContractResponseType.NONE;
}

contractResponse<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startContractResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addContractResponseType(builder:flatbuffers.Builder, contractResponseType:ContractResponseType) {
  builder.addFieldInt8(0, contractResponseType, ContractResponseType.NONE);
}

static addContractResponse(builder:flatbuffers.Builder, contractResponseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, contractResponseOffset, 0);
}

static endContractResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // contract_response
  return offset;
}

static createContractResponse(builder:flatbuffers.Builder, contractResponseType:ContractResponseType, contractResponseOffset:flatbuffers.Offset):flatbuffers.Offset {
  ContractResponse.startContractResponse(builder);
  ContractResponse.addContractResponseType(builder, contractResponseType);
  ContractResponse.addContractResponse(builder, contractResponseOffset);
  return ContractResponse.endContractResponse(builder);
}

unpack(): ContractResponseT {
  return new ContractResponseT(
    this.contractResponseType(),
    (() => {
      const temp = unionToContractResponseType(this.contractResponseType(), this.contractResponse.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: ContractResponseT): void {
  _o.contractResponseType = this.contractResponseType();
  _o.contractResponse = (() => {
      const temp = unionToContractResponseType(this.contractResponseType(), this.contractResponse.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class ContractResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public contractResponseType: ContractResponseType = ContractResponseType.NONE,
  public contractResponse: GetResponseT|PutResponseT|UpdateNotificationT|UpdateResponseT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const contractResponse = builder.createObjectOffset(this.contractResponse);

  return ContractResponse.createContractResponse(builder,
    this.contractResponseType,
    contractResponse
  );
}
}
