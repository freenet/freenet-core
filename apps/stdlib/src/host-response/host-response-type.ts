// automatically generated by the FlatBuffers compiler, do not modify

import { ContractResponse, ContractResponseT } from '../host-response/contract-response.js';
import { DelegateResponse, DelegateResponseT } from '../host-response/delegate-response.js';
import { Error, ErrorT } from '../host-response/error.js';
import { GenerateRandData, GenerateRandDataT } from '../host-response/generate-rand-data.js';
import { Ok, OkT } from '../host-response/ok.js';


export enum HostResponseType {
  NONE = 0,
  ContractResponse = 1,
  DelegateResponse = 2,
  GenerateRandData = 3,
  Ok = 4,
  Error = 5
}

export function unionToHostResponseType(
  type: HostResponseType,
  accessor: (obj:ContractResponse|DelegateResponse|Error|GenerateRandData|Ok) => ContractResponse|DelegateResponse|Error|GenerateRandData|Ok|null
): ContractResponse|DelegateResponse|Error|GenerateRandData|Ok|null {
  switch(HostResponseType[type]) {
    case 'NONE': return null; 
    case 'ContractResponse': return accessor(new ContractResponse())! as ContractResponse;
    case 'DelegateResponse': return accessor(new DelegateResponse())! as DelegateResponse;
    case 'GenerateRandData': return accessor(new GenerateRandData())! as GenerateRandData;
    case 'Ok': return accessor(new Ok())! as Ok;
    case 'Error': return accessor(new Error())! as Error;
    default: return null;
  }
}

export function unionListToHostResponseType(
  type: HostResponseType, 
  accessor: (index: number, obj:ContractResponse|DelegateResponse|Error|GenerateRandData|Ok) => ContractResponse|DelegateResponse|Error|GenerateRandData|Ok|null, 
  index: number
): ContractResponse|DelegateResponse|Error|GenerateRandData|Ok|null {
  switch(HostResponseType[type]) {
    case 'NONE': return null; 
    case 'ContractResponse': return accessor(index, new ContractResponse())! as ContractResponse;
    case 'DelegateResponse': return accessor(index, new DelegateResponse())! as DelegateResponse;
    case 'GenerateRandData': return accessor(index, new GenerateRandData())! as GenerateRandData;
    case 'Ok': return accessor(index, new Ok())! as Ok;
    case 'Error': return accessor(index, new Error())! as Error;
    default: return null;
  }
}
