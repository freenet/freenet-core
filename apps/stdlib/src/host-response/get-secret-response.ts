// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { SecretsId, SecretsIdT } from '../common/secrets-id.js';


export class GetSecretResponse implements flatbuffers.IUnpackableObject<GetSecretResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetSecretResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetSecretResponse(bb:flatbuffers.ByteBuffer, obj?:GetSecretResponse):GetSecretResponse {
  return (obj || new GetSecretResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetSecretResponse(bb:flatbuffers.ByteBuffer, obj?:GetSecretResponse):GetSecretResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetSecretResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key(obj?:SecretsId):SecretsId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SecretsId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

value(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

valueLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

valueArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

delegateContext(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

delegateContextLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

delegateContextArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startGetSecretResponse(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueOffset, 0);
}

static createValueVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startValueVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addDelegateContext(builder:flatbuffers.Builder, delegateContextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, delegateContextOffset, 0);
}

static createDelegateContextVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDelegateContextVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endGetSecretResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // key
  builder.requiredField(offset, 6) // value
  builder.requiredField(offset, 8) // delegate_context
  return offset;
}

static createGetSecretResponse(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset, valueOffset:flatbuffers.Offset, delegateContextOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetSecretResponse.startGetSecretResponse(builder);
  GetSecretResponse.addKey(builder, keyOffset);
  GetSecretResponse.addValue(builder, valueOffset);
  GetSecretResponse.addDelegateContext(builder, delegateContextOffset);
  return GetSecretResponse.endGetSecretResponse(builder);
}

unpack(): GetSecretResponseT {
  return new GetSecretResponseT(
    (this.key() !== null ? this.key()!.unpack() : null),
    this.bb!.createScalarList<number>(this.value.bind(this), this.valueLength()),
    this.bb!.createScalarList<number>(this.delegateContext.bind(this), this.delegateContextLength())
  );
}


unpackTo(_o: GetSecretResponseT): void {
  _o.key = (this.key() !== null ? this.key()!.unpack() : null);
  _o.value = this.bb!.createScalarList<number>(this.value.bind(this), this.valueLength());
  _o.delegateContext = this.bb!.createScalarList<number>(this.delegateContext.bind(this), this.delegateContextLength());
}
}

export class GetSecretResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public key: SecretsIdT|null = null,
  public value: (number)[] = [],
  public delegateContext: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? this.key!.pack(builder) : 0);
  const value = GetSecretResponse.createValueVector(builder, this.value);
  const delegateContext = GetSecretResponse.createDelegateContextVector(builder, this.delegateContext);

  return GetSecretResponse.createGetSecretResponse(builder,
    key,
    value,
    delegateContext
  );
}
}
