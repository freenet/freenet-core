// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ContextUpdated implements flatbuffers.IUnpackableObject<ContextUpdatedT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ContextUpdated {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsContextUpdated(bb:flatbuffers.ByteBuffer, obj?:ContextUpdated):ContextUpdated {
  return (obj || new ContextUpdated()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsContextUpdated(bb:flatbuffers.ByteBuffer, obj?:ContextUpdated):ContextUpdated {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ContextUpdated()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

context(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

contextLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

contextArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startContextUpdated(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addContext(builder:flatbuffers.Builder, contextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, contextOffset, 0);
}

static createContextVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startContextVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endContextUpdated(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // context
  return offset;
}

static createContextUpdated(builder:flatbuffers.Builder, contextOffset:flatbuffers.Offset):flatbuffers.Offset {
  ContextUpdated.startContextUpdated(builder);
  ContextUpdated.addContext(builder, contextOffset);
  return ContextUpdated.endContextUpdated(builder);
}

unpack(): ContextUpdatedT {
  return new ContextUpdatedT(
    this.bb!.createScalarList<number>(this.context.bind(this), this.contextLength())
  );
}


unpackTo(_o: ContextUpdatedT): void {
  _o.context = this.bb!.createScalarList<number>(this.context.bind(this), this.contextLength());
}
}

export class ContextUpdatedT implements flatbuffers.IGeneratedObject {
constructor(
  public context: (number)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const context = ContextUpdated.createContextVector(builder, this.context);

  return ContextUpdated.createContextUpdated(builder,
    context
  );
}
}
