// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ContractResponse, ContractResponseT } from '../host-response/contract-response.js';
import { DelegateResponse, DelegateResponseT } from '../host-response/delegate-response.js';
import { GenerateRandData, GenerateRandDataT } from '../host-response/generate-rand-data.js';
import { HostResponseType, unionToHostResponseType, unionListToHostResponseType } from '../host-response/host-response-type.js';
import { Ok, OkT } from '../host-response/ok.js';


export class HostResponse implements flatbuffers.IUnpackableObject<HostResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HostResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHostResponse(bb:flatbuffers.ByteBuffer, obj?:HostResponse):HostResponse {
  return (obj || new HostResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHostResponse(bb:flatbuffers.ByteBuffer, obj?:HostResponse):HostResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HostResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

responseType():HostResponseType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : HostResponseType.NONE;
}

response<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startHostResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addResponseType(builder:flatbuffers.Builder, responseType:HostResponseType) {
  builder.addFieldInt8(0, responseType, HostResponseType.NONE);
}

static addResponse(builder:flatbuffers.Builder, responseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, responseOffset, 0);
}

static endHostResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // response
  return offset;
}

static finishHostResponseBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedHostResponseBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createHostResponse(builder:flatbuffers.Builder, responseType:HostResponseType, responseOffset:flatbuffers.Offset):flatbuffers.Offset {
  HostResponse.startHostResponse(builder);
  HostResponse.addResponseType(builder, responseType);
  HostResponse.addResponse(builder, responseOffset);
  return HostResponse.endHostResponse(builder);
}

unpack(): HostResponseT {
  return new HostResponseT(
    this.responseType(),
    (() => {
      const temp = unionToHostResponseType(this.responseType(), this.response.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })()
  );
}


unpackTo(_o: HostResponseT): void {
  _o.responseType = this.responseType();
  _o.response = (() => {
      const temp = unionToHostResponseType(this.responseType(), this.response.bind(this));
      if(temp === null) { return null; }
      return temp.unpack()
  })();
}
}

export class HostResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public responseType: HostResponseType = HostResponseType.NONE,
  public response: ContractResponseT|DelegateResponseT|GenerateRandDataT|OkT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const response = builder.createObjectOffset(this.response);

  return HostResponse.createHostResponse(builder,
    this.responseType,
    response
  );
}
}
