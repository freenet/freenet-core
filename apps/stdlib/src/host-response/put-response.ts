// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ContractKey, ContractKeyT } from '../common/contract-key.js';


export class PutResponse implements flatbuffers.IUnpackableObject<PutResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PutResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPutResponse(bb:flatbuffers.ByteBuffer, obj?:PutResponse):PutResponse {
  return (obj || new PutResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPutResponse(bb:flatbuffers.ByteBuffer, obj?:PutResponse):PutResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PutResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key(obj?:ContractKey):ContractKey|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContractKey()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startPutResponse(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static endPutResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // key
  return offset;
}

static createPutResponse(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset):flatbuffers.Offset {
  PutResponse.startPutResponse(builder);
  PutResponse.addKey(builder, keyOffset);
  return PutResponse.endPutResponse(builder);
}

unpack(): PutResponseT {
  return new PutResponseT(
    (this.key() !== null ? this.key()!.unpack() : null)
  );
}


unpackTo(_o: PutResponseT): void {
  _o.key = (this.key() !== null ? this.key()!.unpack() : null);
}
}

export class PutResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public key: ContractKeyT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? this.key!.pack(builder) : 0);

  return PutResponse.createPutResponse(builder,
    key
  );
}
}
