// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ContractKey, ContractKeyT } from '../common/contract-key.js';
import { UpdateData, UpdateDataT } from '../common/update-data.js';


export class UpdateNotification implements flatbuffers.IUnpackableObject<UpdateNotificationT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdateNotification {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdateNotification(bb:flatbuffers.ByteBuffer, obj?:UpdateNotification):UpdateNotification {
  return (obj || new UpdateNotification()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdateNotification(bb:flatbuffers.ByteBuffer, obj?:UpdateNotification):UpdateNotification {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdateNotification()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key(obj?:ContractKey):ContractKey|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new ContractKey()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

update(obj?:UpdateData):UpdateData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new UpdateData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startUpdateNotification(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static addUpdate(builder:flatbuffers.Builder, updateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, updateOffset, 0);
}

static endUpdateNotification(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // key
  builder.requiredField(offset, 6) // update
  return offset;
}


unpack(): UpdateNotificationT {
  return new UpdateNotificationT(
    (this.key() !== null ? this.key()!.unpack() : null),
    (this.update() !== null ? this.update()!.unpack() : null)
  );
}


unpackTo(_o: UpdateNotificationT): void {
  _o.key = (this.key() !== null ? this.key()!.unpack() : null);
  _o.update = (this.update() !== null ? this.update()!.unpack() : null);
}
}

export class UpdateNotificationT implements flatbuffers.IGeneratedObject {
constructor(
  public key: ContractKeyT|null = null,
  public update: UpdateDataT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const key = (this.key !== null ? this.key!.pack(builder) : 0);
  const update = (this.update !== null ? this.update!.pack(builder) : 0);

  UpdateNotification.startUpdateNotification(builder);
  UpdateNotification.addKey(builder, key);
  UpdateNotification.addUpdate(builder, update);

  return UpdateNotification.endUpdateNotification(builder);
}
}
