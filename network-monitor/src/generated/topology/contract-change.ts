// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import {
    ContractChangeType,
    unionToContractChangeType,
    unionListToContractChangeType,
} from "../topology/contract-change-type";

export class ContractChange {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): ContractChange {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsContractChange(
        bb: flatbuffers.ByteBuffer,
        obj?: ContractChange
    ): ContractChange {
        return (obj || new ContractChange()).__init(
            bb.readInt32(bb.position()) + bb.position(),
            bb
        );
    }

    static getSizePrefixedRootAsContractChange(
        bb: flatbuffers.ByteBuffer,
        obj?: ContractChange
    ): ContractChange {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ContractChange()).__init(
            bb.readInt32(bb.position()) + bb.position(),
            bb
        );
    }

    contractId(): string | null;
    contractId(
        optionalEncoding: flatbuffers.Encoding
    ): string | Uint8Array | null;
    contractId(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
            : null;
    }

    changeType(): ContractChangeType {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset
            ? this.bb!.readUint8(this.bb_pos + offset)
            : ContractChangeType.NONE;
    }

    change<T extends flatbuffers.Table>(obj: any): any | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
    }

    static startContractChange(builder: flatbuffers.Builder) {
        builder.startObject(3);
    }

    static addContractId(
        builder: flatbuffers.Builder,
        contractIdOffset: flatbuffers.Offset
    ) {
        builder.addFieldOffset(0, contractIdOffset, 0);
    }

    static addChangeType(
        builder: flatbuffers.Builder,
        changeType: ContractChangeType
    ) {
        builder.addFieldInt8(1, changeType, ContractChangeType.NONE);
    }

    static addChange(
        builder: flatbuffers.Builder,
        changeOffset: flatbuffers.Offset
    ) {
        builder.addFieldOffset(2, changeOffset, 0);
    }

    static endContractChange(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // contract_id
        return offset;
    }

    static createContractChange(
        builder: flatbuffers.Builder,
        contractIdOffset: flatbuffers.Offset,
        changeType: ContractChangeType,
        changeOffset: flatbuffers.Offset
    ): flatbuffers.Offset {
        ContractChange.startContractChange(builder);
        ContractChange.addContractId(builder, contractIdOffset);
        ContractChange.addChangeType(builder, changeType);
        ContractChange.addChange(builder, changeOffset);
        return ContractChange.endContractChange(builder);
    }
}
