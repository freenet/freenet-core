// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class UpdateSuccess {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): UpdateSuccess {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsUpdateSuccess(bb: flatbuffers.ByteBuffer, obj?: UpdateSuccess): UpdateSuccess {
    return (obj || new UpdateSuccess()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsUpdateSuccess(bb: flatbuffers.ByteBuffer, obj?: UpdateSuccess): UpdateSuccess {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new UpdateSuccess()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  transaction(): string | null
  transaction(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  transaction(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  requester(): string | null
  requester(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  requester(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  target(): string | null
  target(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  target(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  key(): string | null
  key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  key(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  timestamp(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
  }

  contractLocation(): number {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
  }

  static startUpdateSuccess(builder: flatbuffers.Builder) {
    builder.startObject(6);
  }

  static addTransaction(builder: flatbuffers.Builder, transactionOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, transactionOffset, 0);
  }

  static addRequester(builder: flatbuffers.Builder, requesterOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, requesterOffset, 0);
  }

  static addTarget(builder: flatbuffers.Builder, targetOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, targetOffset, 0);
  }

  static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {
    builder.addFieldOffset(3, keyOffset, 0);
  }

  static addTimestamp(builder: flatbuffers.Builder, timestamp: bigint) {
    builder.addFieldInt64(4, timestamp, BigInt('0'));
  }

  static addContractLocation(builder: flatbuffers.Builder, contractLocation: number) {
    builder.addFieldFloat64(5, contractLocation, 0.0);
  }

  static endUpdateSuccess(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4) // transaction
    builder.requiredField(offset, 6) // requester
    builder.requiredField(offset, 8) // target
    builder.requiredField(offset, 10) // key
    return offset;
  }

  static createUpdateSuccess(builder: flatbuffers.Builder, transactionOffset: flatbuffers.Offset, requesterOffset: flatbuffers.Offset, targetOffset: flatbuffers.Offset, keyOffset: flatbuffers.Offset, timestamp: bigint, contractLocation: number): flatbuffers.Offset {
    UpdateSuccess.startUpdateSuccess(builder);
    UpdateSuccess.addTransaction(builder, transactionOffset);
    UpdateSuccess.addRequester(builder, requesterOffset);
    UpdateSuccess.addTarget(builder, targetOffset);
    UpdateSuccess.addKey(builder, keyOffset);
    UpdateSuccess.addTimestamp(builder, timestamp);
    UpdateSuccess.addContractLocation(builder, contractLocation);
    return UpdateSuccess.endUpdateSuccess(builder);
  }
}
