// automatically generated by the FlatBuffers compiler, do not modify

import {
  AddedConnection,
  AddedConnectionT,
} from "../topology/added-connection";
import { Error, ErrorT } from "../topology/error";
import {
  RemovedConnection,
  RemovedConnectionT,
} from "../topology/removed-connection";

export enum PeerChangeType {
  NONE = 0,
  AddedConnection = 1,
  RemovedConnection = 2,
  Error = 3,
}

export function unionToPeerChangeType(
  type: PeerChangeType,
  accessor: (
    obj: AddedConnection | Error | RemovedConnection
  ) => AddedConnection | Error | RemovedConnection | null
): AddedConnection | Error | RemovedConnection | null {
  switch (PeerChangeType[type]) {
    case "NONE":
      return null;
    case "AddedConnection":
      return accessor(new AddedConnection())! as AddedConnection;
    case "RemovedConnection":
      return accessor(new RemovedConnection())! as RemovedConnection;
    case "Error":
      return accessor(new Error())! as Error;
    default:
      return null;
  }
}

export function unionListToPeerChangeType(
  type: PeerChangeType,
  accessor: (
    index: number,
    obj: AddedConnection | Error | RemovedConnection
  ) => AddedConnection | Error | RemovedConnection | null,
  index: number
): AddedConnection | Error | RemovedConnection | null {
  switch (PeerChangeType[type]) {
    case "NONE":
      return null;
    case "AddedConnection":
      return accessor(index, new AddedConnection())! as AddedConnection;
    case "RemovedConnection":
      return accessor(index, new RemovedConnection())! as RemovedConnection;
    case "Error":
      return accessor(index, new Error())! as Error;
    default:
      return null;
  }
}
