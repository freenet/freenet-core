// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class Error implements flatbuffers.IUnpackableObject<ErrorT> {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Error {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsError(bb: flatbuffers.ByteBuffer, obj?: Error): Error {
    return (obj || new Error()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsError(
    bb: flatbuffers.ByteBuffer,
    obj?: Error
  ): Error {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Error()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  message(): string | null;
  message(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  message(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  static startError(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addMessage(
    builder: flatbuffers.Builder,
    messageOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(0, messageOffset, 0);
  }

  static endError(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // message
    return offset;
  }

  static createError(
    builder: flatbuffers.Builder,
    messageOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    Error.startError(builder);
    Error.addMessage(builder, messageOffset);
    return Error.endError(builder);
  }

  unpack(): ErrorT {
    return new ErrorT(this.message());
  }

  unpackTo(_o: ErrorT): void {
    _o.message = this.message();
  }
}

export class ErrorT implements flatbuffers.IGeneratedObject {
  constructor(public message: string | Uint8Array | null = null) {}

  pack(builder: flatbuffers.Builder): flatbuffers.Offset {
    const message =
      this.message !== null ? builder.createString(this.message!) : 0;

    return Error.createError(builder, message);
  }
}
