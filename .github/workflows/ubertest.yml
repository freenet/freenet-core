name: Ubertest

on:
  push:
    branches: [ main, ubertest ]
  pull_request:
    branches: [ main ]
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      peer_count:
        description: 'Number of peers to test with'
        required: false
        default: '6'
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  ubertest:
    name: Run Application Ubertest
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      # Disable submodules due to broken .gitmodules in main branch
      # (wiki submodule reference issue)

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-git-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
        restore-keys: |
          ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          ${{ runner.os }}-cargo-target-

    - name: Install riverctl
      run: |
        echo "üì¶ Installing riverctl from crates.io..."
        cargo install riverctl
        echo "‚úì riverctl installed"
        riverctl --version

    - name: Build freenet-core
      run: |
        echo "üî® Building freenet-core..."
        cargo build --release --bin freenet
        echo "‚úì Build complete"

    - name: Run ubertest
      env:
        UBERTEST_PEER_COUNT: ${{ github.event.inputs.peer_count || '6' }}
        RUST_LOG: info
      run: |
        echo "üöÄ Running ubertest with $UBERTEST_PEER_COUNT peers..."
        cd crates/core
        cargo test --test ubertest -- --nocapture --test-threads=1
      timeout-minutes: 20

    - name: Upload test logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ubertest-logs-${{ github.run_id }}
        path: |
          /tmp/river_test_*/
          crates/core/target/debug/deps/ubertest-*.log
        retention-days: 7

    - name: Test Summary
      if: always()
      run: |
        echo "## Ubertest Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Peer Count**: ${{ github.event.inputs.peer_count || '6' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Duration**: ${{ steps.ubertest.outputs.duration || 'N/A' }}" >> $GITHUB_STEP_SUMMARY

  notify-status:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: ubertest
    if: always()
    steps:
    - name: Check test status
      run: |
        if [ "${{ needs.ubertest.result }}" == "success" ]; then
          echo "‚úÖ Ubertest passed"
        else
          echo "‚ùå Ubertest failed"
          exit 1
        fi
