name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.31)'
        required: true
        type: string
      skip_tests:
        description: 'Skip running tests before release'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Dry run - show what would be done without publishing'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  validate:
    name: Validate release inputs
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      fdev_version: ${{ steps.validate.outputs.fdev_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ inputs.version }}"

          # Remove 'v' prefix if present
          VERSION="${VERSION#v}"

          # Validate format X.Y.Z
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format X.Y.Z (e.g., 0.1.31)"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Get current fdev version and increment patch
          CURRENT_FDEV=$(grep "^version" crates/fdev/Cargo.toml | cut -d'"' -f2)
          FDEV_MAJOR=$(echo "$CURRENT_FDEV" | cut -d. -f1)
          FDEV_MINOR=$(echo "$CURRENT_FDEV" | cut -d. -f2)
          FDEV_PATCH=$(echo "$CURRENT_FDEV" | cut -d. -f3)
          FDEV_NEW_PATCH=$((FDEV_PATCH + 1))
          FDEV_VERSION="${FDEV_MAJOR}.${FDEV_MINOR}.${FDEV_NEW_PATCH}"

          echo "fdev_version=$FDEV_VERSION" >> $GITHUB_OUTPUT

          echo "✅ Release versions:"
          echo "  freenet: $VERSION"
          echo "  fdev: $FDEV_VERSION"

  update_versions:
    name: Update versions and create PR
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update freenet version
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          sed "s/^version = \".*\"/version = \"$VERSION\"/" crates/core/Cargo.toml > crates/core/Cargo.toml.tmp
          mv crates/core/Cargo.toml.tmp crates/core/Cargo.toml

      - name: Update fdev version
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          FDEV_VERSION="${{ needs.validate.outputs.fdev_version }}"

          sed "s/^version = \".*\"/version = \"$FDEV_VERSION\"/" crates/fdev/Cargo.toml > crates/fdev/Cargo.toml.tmp
          mv crates/fdev/Cargo.toml.tmp crates/fdev/Cargo.toml

          sed "s/freenet = { path = \"..\/core\", version = \".*\" }/freenet = { path = \"..\/core\", version = \"$VERSION\" }/" crates/fdev/Cargo.toml > crates/fdev/Cargo.toml.tmp2
          mv crates/fdev/Cargo.toml.tmp2 crates/fdev/Cargo.toml

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Update Cargo.lock
        run: cargo update --workspace

      - name: Create release branch
        run: |
          BRANCH="release/v${{ needs.validate.outputs.version }}"
          git checkout -b "$BRANCH"
          git add -A
          git commit -m "chore: bump versions to ${{ needs.validate.outputs.version }}

          - freenet: → ${{ needs.validate.outputs.version }}
          - fdev: → ${{ needs.validate.outputs.fdev_version }}

          🤖 Automated release commit"
          git push origin "$BRANCH"
          echo "RELEASE_BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Create Pull Request
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
            --title "build: release ${{ needs.validate.outputs.version }}" \
            --body "**Automated release PR**

          - freenet: → **${{ needs.validate.outputs.version }}**
          - fdev: → **${{ needs.validate.outputs.fdev_version }}**

          This PR will auto-merge once GitHub CI passes.
          Generated by: \`.github/workflows/release.yml\`" \
            --base main \
            --head "release/v${{ needs.validate.outputs.version }}")

          PR_NUMBER=$(echo "$PR_URL" | grep -o '[0-9]\+$')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "✅ Created PR #$PR_NUMBER"

      - name: Enable auto-merge
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ steps.create_pr.outputs.pr_number }} --squash --auto
          echo "✅ Auto-merge enabled"

  wait_for_pr:
    name: Wait for PR to merge
    runs-on: ubuntu-latest
    needs: [validate, update_versions]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Wait for PR to be merged
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ needs.update_versions.outputs.pr_number }}"
          MAX_WAIT=1800  # 30 minutes
          WAIT_INTERVAL=30
          ELAPSED=0

          echo "⏳ Waiting for PR #$PR_NUMBER to merge..."

          while [ $ELAPSED -lt $MAX_WAIT ]; do
            PR_STATE=$(gh pr view $PR_NUMBER --json state --jq '.state')

            if [ "$PR_STATE" == "MERGED" ]; then
              echo "✅ PR #$PR_NUMBER merged successfully!"
              exit 0
            elif [ "$PR_STATE" == "CLOSED" ]; then
              echo "❌ PR #$PR_NUMBER was closed without merging"
              exit 1
            fi

            echo "  Still waiting... (${ELAPSED}s elapsed)"
            sleep $WAIT_INTERVAL
            ELAPSED=$((ELAPSED + WAIT_INTERVAL))
          done

          echo "❌ Timeout after ${MAX_WAIT}s waiting for PR to merge"
          exit 1

  publish_crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [validate, wait_for_pr]
    if: always() && (needs.wait_for_pr.result == 'success' || inputs.dry_run)

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: main

      - name: Pull latest changes
        run: git pull origin main

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish freenet to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "📦 [DRY RUN] Verifying freenet ${{ needs.validate.outputs.version }} can be published to crates.io..."
            cargo publish -p freenet --dry-run
            echo "✅ freenet dry-run successful (would publish)"
          else
            echo "📦 Publishing freenet ${{ needs.validate.outputs.version }} to crates.io..."
            cargo publish -p freenet
            echo "✅ freenet published successfully"
          fi

      - name: Wait for crates.io propagation
        if: ${{ !inputs.dry_run }}
        run: |
          echo "⏳ Waiting 30s for crates.io to propagate..."
          sleep 30

      - name: Publish fdev to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "📦 [DRY RUN] Verifying fdev ${{ needs.validate.outputs.fdev_version }} can be published to crates.io..."
            cargo publish -p fdev --dry-run
            echo "✅ fdev dry-run successful (would publish)"
          else
            echo "📦 Publishing fdev ${{ needs.validate.outputs.fdev_version }} to crates.io..."
            cargo publish -p fdev
            echo "✅ fdev published successfully"
          fi

  create_release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [validate, publish_crates]
    if: always() && (needs.publish_crates.result == 'success' || inputs.dry_run)

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin main

      - name: Generate release notes
        id: release_notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          # Get previous release
          PREV_VERSION=$(gh release list --limit 50 --json tagName --jq '.[].tagName' | head -1 || echo "")

          if [ -z "$PREV_VERSION" ]; then
            NOTES="Release $VERSION"
          else
            # Generate notes using GitHub's API
            NOTES=$(gh api repos/:owner/:repo/releases/generate-notes \
              -f tag_name="v$VERSION" \
              -f target_commitish=main \
              -f previous_tag_name="$PREV_VERSION" \
              --jq '.body')
          fi

          # Save to file for multi-line output
          echo "$NOTES" > /tmp/release_notes.md
          echo "notes_file=/tmp/release_notes.md" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: ${{ !inputs.dry_run }}
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "✅ Created and pushed tag v$VERSION"

      - name: Create GitHub release
        if: ${{ !inputs.dry_run }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          gh release create "v$VERSION" \
            --title "v$VERSION" \
            --notes-file "${{ steps.release_notes.outputs.notes_file }}"
          echo "✅ Created GitHub release v$VERSION"

      - name: Dry run summary
        if: ${{ inputs.dry_run }}
        run: |
          echo "🏃 DRY RUN - Would have created:"
          echo "  - Tag: v${{ needs.validate.outputs.version }}"
          echo "  - Release: v${{ needs.validate.outputs.version }}"
          echo
          echo "Release notes preview:"
          cat "${{ steps.release_notes.outputs.notes_file }}"

  summary:
    name: Release summary
    runs-on: ubuntu-latest
    needs: [validate, create_release]
    if: always()

    steps:
      - name: Release completed
        run: |
          echo "🎉 Release ${{ needs.validate.outputs.version }} completed!"
          echo
          echo "Summary:"
          echo "  - freenet ${{ needs.validate.outputs.version }} published to crates.io"
          echo "  - fdev ${{ needs.validate.outputs.fdev_version }} published to crates.io"
          echo "  - GitHub release created: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}"
          echo "  - Cross-compilation workflow will run automatically"
          echo "  - Binaries will be attached when workflow completes"
